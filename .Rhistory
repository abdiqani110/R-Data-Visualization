#library(dplyr)
# group_by() on department
grp_tbl <- df %>% group_by(department)
# Create a data frame
df <- data.frame(
group = c("A", "A", "B", "B", "B"),
value = c(1, 2, 3, 4, 5)
)
# Use group_by() to group the data frame by the 'group' variable
df_grouped <- group_by(df, group)
# Use summarise() to calculate the mean of the 'value' variable for each group
df_summary <- summarise(df_grouped, mean_value = mean(value))
# Create a data frame
df <- data.frame(
group = c("A", "A", "B", "B", "B"),
value = c(1, 2, 3, 4, 5)
)
# Use group_by() to group the data frame by the 'group' variable
df_grouped <- group_by(df, group)
# Use summarise() to calculate the mean of the 'value' variable for each group
df_summary <- summarise(df_grouped, mean_value = mean(value))
df_grouped
df_summary
# Create a data frame
df <- data.frame(
group = c("A", "A", "B", "B", "B"),
value = c(1, 2, 3, 4, 5)
)
df
# Use group_by() to group the data frame by the 'group' variable
df_grouped <- group_by(df, group)
# Use summarise() to calculate the mean of the 'value' variable for each group
df_summary <- summarise(df_grouped, mean_value = mean(value))
df_grouped
df_summary
# Generate a random dataset with 10,000 rows and 3 columns
set.seed(123)
df <- data.frame(
group = sample(c("A", "B", "C"), 10, replace = TRUE),
value1 = rnorm(10),
value2 = rnorm(10)
)
# Use group_by() to group the data frame by the 'group' variable
df_grouped <- group_by(df, group)
# Use summarise() to calculate the mean of the 'value1' and 'value2' variables for each group
df_summary <- summarise(df_grouped,
mean_value1 = mean(value1),
mean_value2 = mean(value2))
# View the resulting summary data frame
head(df_summary)
df_summary
# Generate a random dataset with 10,000 rows and 3 columns
set.seed(123)
df <- data.frame(
group = sample(c("A", "B", "C"), 10, replace = TRUE),
value1 = rnorm(10),
value2 = rnorm(10)
)
df
# Use group_by() to group the data frame by the 'group' variable
df_grouped <- group_by(df, group)
# Use summarise() to calculate the mean of the 'value1' and 'value2' variables for each group
df_summary <- summarise(df_grouped,
mean_value1 = mean(value1),
mean_value2 = mean(value2))
# View the resulting summary data frame
head(df_summary)
df_summary
purchases %>%
pivot_wider( #<<
names_from = item_no, #<<
values_from = item #<<
) #<<
# Joining the prices data to the purchases
purchases %>%
left_join(prices) #<<
# reading the dataset
hotels <- read_csv("data/hotels.csv")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
# viewing the mpg data structure
glimpse(ggplot2::mpg)
# viewing viewing the relationsship between displ and hwy
# aes(displ, hwy) or aes(x=displ, y=hwy)
suppressWarnings(library(ggplot2))
ggplot(data= mpg, mapping = aes(x=displ, y=hwy)) +
geom_point()
# adding a new property/variable informaiton to the plot
ggplot(data = mpg, mapping = aes(displ, hwy, colour = cyl)) +
geom_point()
# checking cyl uniqu values
table (mpg$cyl)
mpg$cyl = as.factor(mpg$cyl) # first converting the cyl variable to a factor
ggplot(mpg, aes(displ, hwy, colour = class, shape = cyl)) +
geom_point()
# checking the cyl data type
table(mpg$class)
# checking the cyl data type
str(mpg)
# using the same variable for the different properties
ggplot(mpg, aes(displ, hwy, colour = cyl, shape=cyl)) +
geom_point()
# adding the a size attribute
library(ggplot2)
# aes(displ, hwy) or aes(x=displ, y=hwy)
ggplot(mtcars,aes(x=disp,y=hp,color=wt,size=mpg)) %+%
geom_point()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
# creating plot / mapping data
geom_point(col='blue') + # representing data with points
facet_wrap(~ manufacturer) # faceting the plot by manufacturer var
# proportions by the manufacturer variable
table(mpg$manufacturer)
ggplot(data = mpg) + ## creating the plot
geom_point(mapping = aes(x = displ, y = hwy), col='blue') + # adding data representation and mapping
facet_grid(drv ~ cyl) # faceting the plot by drv and cyl variables
# generating with disp-hwy scatter plot with grouping by the class var.
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth() # adding smooth fited line
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype=drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, color = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, color = drv)) +
labs(x = "Car's engine size (in litres)", y = "Car's fuel efficiency on the highway",
title = "Relationship b/w car's feul efficiency and its engine size", color='drivetrain type')
ggplot(data = mpg) +
geom_bar(mapping = aes(x = class, fill = drv)) +
xlab('Type of cars') + ylab('Number of cars')
ggplot(data = mpg) +
geom_bar(mapping = aes(x = class, fill = drv)) +
xlab('Type of cars') + ylab('Number of cars') +
coord_flip() # flipping/switching the x/y cordinates
ggsave("final-plot.png", width=5, height=3)
install.packages('IRkernel')
IRkernel::installspec()
IRkernel::installspec()
q()
library(haven)
SOBR71SV <- read_sav("C:/Users/Abdiqani/Downloads/SOBR71SV/SOBR71SV.sav")
View(SOBR71SV)
write.csv('sobr71sv.csv', 'c//users//abdiqani//downloads')
write.csv('sobr71sv.csv', 'c:\\users\\abdiqani\\downloads\\sobr71sv')
write.csv(sobr71sv.csv, 'c:\\users\\abdiqani\\downloads\\sobr71sv.csv')
write.csv(SOBR71SV, 'c:\\users\\abdiqani\\downloads\\SOBR71SV.csv')
library(haven)
Banadir_data <- read_sav("C:/Users/Abdiqani/Downloads/Banadir data.sav")
View(Banadir_data)
write.csv(Banadir_data , 'c:\\users\\abdiqani\\downloads\\Banadir_data.csv')
library(haven)
SOMLFS2019IND_1_ <- read_sav("C:/Users/Abdiqani/Downloads/SOMLFS2019IND (1).zip")
View(SOMLFS2019IND_1_)
write.csv(SOMLFS2019IND_1_ , 'c:\\users\\abdiqani\\downloads\\SOMLFS2019IND_1.csv')
library(haven)
WLD_2005_PCD_v01_M_SPSS <- read_sav("C:/Users/Abdiqani/Downloads/WLD_2005_PCD_v01_M_SPSS.zip")
View(WLD_2005_PCD_v01_M_SPSS)
plot(cars)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # metapackage of all tidyverse packages
#library(readxl)
# Read Excel file
df <- read_excel("SOMALIA_2021_POPULATION_FIGURES_AND_DISAGGREGATION.xlsx")
library(tidyverse) # metapackage of all tidyverse packages
library(readxl)# Load the necessary package to work with Excel files
# Read Excel file
df <- read_excel("SOMALIA_2021_POPULATION_FIGURES_AND_DISAGGREGATION.xlsx")
# View the data
df
dim(df)
# Read Excel file
df <- read_excel("SOMALIA_2021_POPULATION_FIGURES_AND_DISAGGREGATION.xlsx")
# View the data
df
columns(df)
colnames(df)
library(tidyverse) # metapackage of all tidyverse packages
library(readxl)# Load the necessary package to work with Excel files
# Read Excel file
df <- read_excel("SOMALIA_2021_POPULATION_FIGURES_AND_DISAGGREGATION.xlsx")
# View the data
df
dim(df) # view dimentions of dataset
colnames(df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # metapackage of all tidyverse packages
library(readxl)# Load the necessary package to work with Excel files
# Read Excel file
df <- read_excel("SOMALIA_2021_POPULATION_FIGURES_AND_DISAGGREGATION.xlsx")
# View the data
df
library(tidyverse) # metapackage of all tidyverse packages
library(readxl)# Load the necessary package to work with Excel files
# Read Excel file
df <- read_excel("SOMALIA_2021_POPULATION_FIGURES_AND_DISAGGREGATION.xlsx")
# View the data
df
dim(df) # view dimentions of dataset
colnames(df)
# Read Excel file
df <- read_excel("SOMALIA_2021_POPULATION_FIGURES_AND_DISAGGREGATION.xlsx")
# View the data
df
dim(df) # view dimentions of dataset
colnames(df)
dim(df) # view dimentions of dataset
colnames(df)
# Read Excel file
df <- read_excel("SOMALIA_2021_POPULATION_FIGURES_AND_DISAGGREGATION.xlsx")
# View the data
df
# Read Excel file
df2 <- read_csv("somalia_population_disagregation.csv")
# View the data
df2
# Read Excel file
df2 <- read_csv("somalia_population_disagregation.csv")
# View the data
df2
colnames(df2)
dim(df2)
is.na(df2)
is.na(df2).sum()
# calculate the sum of missing values in the dataframe
sum(is.na(df2))
sum(duplicated(df2))
# Checking data types for df2
str(df2)
colnames(df2) <- c("Region", "District", "Total_population", "IDPs", "Non_displaced",
"IDPs_children", "IDPs_men", "IDPs_women", "IDPs_elderly", "Subtotal_IDPs",
"Non_disp_children", "Non_disp_men", "Non_disp_women", "Non_disp_elderly",
"Subtotal_non_displaced", "Total_children", "Total_men", "Total_women",
"Total_elderly", "Total")
df2
# Create boxplots for each variable
boxplot(df2$Total_population_estimate, df2$of_whom_IDPs, df2$of_whom_non_displaced, df2$Displaced_Children, df2$Displaced_Men, df2$Displaced_Women, df2$Displaced_Elderly, df2$Subtotal_displaced, df2$Non_Displaced_Children, df2$Non_Displaced_Men, df2$Non_Displaced_Women, df2$Non_Displaced_Elderly, df2$Subtotal_displaced_2, df2$Total_Children, df2$Total_Men, df2$Total_Women, df2$Total_Elderly, df2$Total)
# Identify potential outliers in each variable
outliers <- boxplot(df2$Total_population_estimate, df2$of_whom_IDPs, df2$of_whom_non_displaced, df2$Displaced_Children, df2$Displaced_Men, df2$Displaced_Women, df2$Displaced_Elderly, df2$Subtotal_displaced, df2$Non_Displaced_Children, df2$Non_Displaced_Men, df2$Non_Displaced_Women, df2$Non_Displaced_Elderly, df2$Subtotal_displaced_2, df2$Total_Children, df2$Total_Men, df2$Total_Women, df2$Total_Elderly, df2$Total, plot=FALSE)$out
# Print out the potential outliers
print(outliers)
# Create boxplots for each variable
boxplot(df2$Total_population, df2$IDPs, df2$Non_displaced, df2$Displaced_Children, df2$Displaced_Men, df2$Displaced_Women, df2$Displaced_Elderly, df2$Subtotal_displaced, df2$Non_Displaced_Children, df2$Non_Displaced_Men, df2$Non_Displaced_Women, df2$Non_Displaced_Elderly, df2$Subtotal_displaced_2, df2$Total_Children, df2$Total_Men, df2$Total_Women, df2$Total_Elderly, df2$Total)
# Identify potential outliers in each variable
outliers <- boxplot(df2$Total_population, df2$IDPs, df2$Non_displaced, df2$Displaced_Children, df2$Displaced_Men, df2$Displaced_Women, df2$Displaced_Elderly, df2$Subtotal_displaced, df2$Non_Displaced_Children, df2$Non_Displaced_Men, df2$Non_Displaced_Women, df2$Non_Displaced_Elderly, df2$Subtotal_displaced_2, df2$Total_Children, df2$Total_Men, df2$Total_Women, df2$Total_Elderly, df2$Total, plot=FALSE)$out
# Print out the potential outliers
print(outliers)
# Create boxplots for each variable
boxplot(df2$Total_population, df2$IDPs, df2$Non_displaced, df2$IDPs_children, df2$IDPs_men, df2$IDPs_women, df2$IDPs_elderly, df2$Subtotal_IDPs, df2$Non_disp_children, df2$Non_disp_men, df2$Non_disp_women, df2$Non_disp_elderly, df2$Subtotal_non_displaced, df2$Total_children, df2$Total_men, df2$Total_women, df2$Total_elderly, df2$Total)
# Identify potential outliers in each variable
outliers <- boxplot(df2$Total_population, df2$IDPs, df2$Non_displaced, df2$IDPs_children, df2$IDPs_men, df2$IDPs_women, df2$IDPs_elderly, df2$Subtotal_IDPs, df2$Non_disp_children, df2$Non_disp_men, df2$Non_disp_women, df2$Non_disp_elderly, df2$Subtotal_non_displaced, df2$Total_children, df2$Total_men, df2$Total_women, df2$Total_elderly, df2$Total, plot=FALSE)$out
# Print out the potential outliers
print(outliers)
source("E:/Semester 2/3. Data Visualization/course project/course project.Rmd")
source("E:/Semester 2/3. Data Visualization/course project/course project.Rmd")
# Compute the Tukey fences
Q1 <- quantile(df$Total_population, 0.25)
Q3 <- quantile(df$Total_population, 0.75)
IQR <- Q3 - Q1
lower.fence <- Q1 - 1.5 * IQR
upper.fence <- Q3 + 1.5 * IQR
# Identify potential outliers
outliers <- df$Total_population < lower.fence | df$Total_population > upper.fence
# Compute the Tukey fences
Q1 <- quantile(df$Total_population, 0.25)
Q3 <- quantile(df$Total_population, 0.75)
IQR <- Q3 - Q1
lower.fence <- Q1 - 1.5 * IQR
upper.fence <- Q3 + 1.5 * IQR
# Identify potential outliers
outliers <- df$Total_population < lower.fence | df$Total_population > upper.fence
outliers
# Compute the Tukey fences
Q1 <- quantile(df$Total_population, 0.25)
Q3 <- quantile(df$Total_population, 0.75)
IQR <- Q3 - Q1
lower.fence <- Q1 - 1.5 * IQR
upper.fence <- Q3 + 1.5 * IQR
# Identify potential outliers
outliers <- df$Total_population < lower.fence | df$Total_population > upper.fence
outliers
outliers <- df2[output == TRUE, ]
boxplot(df2, main="Boxplot")
# Create boxplots for each variable
boxplot( df2$IDPs, df2$Non_displaced, df2$IDPs_children, df2$IDPs_men, df2$IDPs_women, df2$IDPs_elderly, df2$Subtotal_IDPs, df2$Non_disp_children, df2$Non_disp_men, df2$Non_disp_women, df2$Non_disp_elderly,  df2$Total_children, df2$Total_men, df2$Total_women, df2$Total_elderly)
# Identify potential outliers in each variable
outliers <- boxplot( df2$IDPs, df2$Non_displaced, df2$IDPs_children, df2$IDPs_men, df2$IDPs_women, df2$IDPs_elderly, df2$Subtotal_IDPs, df2$Non_disp_children, df2$Non_disp_men, df2$Non_disp_women, df2$Non_disp_elderly,  df2$Total_children, df2$Total_men, df2$Total_women, df2$Total_elderly, plot=FALSE)$out
# Print out the potential outliers
print(outliers)
describe(df2)
# Install and load the psych package
install.packages("psych")
# Install and load the psych package
install.packages("psych")
library(psych)
# Install and load the psych package
install.packages("psych")
library(psych)
install.packages("psych")
# Install and load the psych package
install.packages("psych")
library(psych)
unique(df$Region)
# creating new column 'State' based on region column values
mapping <- c('Gedo' = 'Jubbaland', 'Banadir' = 'Banaadir', 'Mudug' = 'Galmudug', 'Bay' = 'South West', 'Lower Shabelle' = 'Jubbaland', 'Bari' = 'Puntland', 'Hiraan' = 'Hirshabeelle', 'Nugaal' = 'Puntland', 'Lower Juba' = 'Jubbaland', 'Galgaduud' = 'Galmudug', 'Sanaag' = 'Somaliland', 'Awdal' = 'Somaliland', 'Woqooyi Galbeed' = 'Somaliland', 'Togdheer' = 'Somaliland', 'Bakool' = 'South West', 'Sool' = 'Puntland', 'Middle Shabelle' = 'Hirshabeelle', 'Middle Juba' = 'Hirshabeelle')
df2$State <- mapping[df2$Rigion]
source("E:/Semester 2/3. Data Visualization/course project/course project.Rmd")
# Example mapping of Region to State
mapping <- c("Gedo" = "Jubbaland", "Banadir" = "Banaadir", "Mudug" = "Galmudug", "Bay" = "South West", "Lower Shabelle" = "Jubbaland", "Bari" = "Puntland", "Hiraan" = "Hirshabeelle", "Nugaal" = "Puntland", "Lower Juba" = "Jubbaland", "Galgaduud" = "Galmudug", "Sanaag" = "Somaliland", "Awdal" = "Somaliland", "Woqooyi Galbeed" = "Somaliland", "Togdheer" = "Somaliland", "Bakool" = "South West", "Sool" = "Puntland", "Middle Shabelle" = "Hirshabeelle", "Middle Juba" = "Hirshabeelle")
# Example dataset with Region column
df2 <- df2(Region = c( "Middle Shabelle", "Lower Shabelle", "Lower Juba", "Gedo", "Bay", "Awdal", "Banadir", "Bari", "Hiraan", "Woqooyi Galbeed", "Middle Juba", "Togdheer", "Nugaal", "Galgaduud", "Sool", "Sanaag", "Bakool", "Mudug" ))
# Example mapping of Region to State
mapping <- c("Gedo" = "Jubbaland", "Banadir" = "Banaadir", "Mudug" = "Galmudug", "Bay" = "South West", "Lower Shabelle" = "Jubbaland", "Bari" = "Puntland", "Hiraan" = "Hirshabeelle", "Nugaal" = "Puntland", "Lower Juba" = "Jubbaland", "Galgaduud" = "Galmudug", "Sanaag" = "Somaliland", "Awdal" = "Somaliland", "Woqooyi Galbeed" = "Somaliland", "Togdheer" = "Somaliland", "Bakool" = "South West", "Sool" = "Puntland", "Middle Shabelle" = "Hirshabeelle", "Middle Juba" = "Hirshabeelle")
# Example dataset with Region column
df2 <- data.frame(Region = c( "Middle Shabelle", "Lower Shabelle", "Lower Juba", "Gedo", "Bay", "Awdal", "Banadir", "Bari", "Hiraan", "Woqooyi Galbeed", "Middle Juba", "Togdheer", "Nugaal", "Galgaduud", "Sool", "Sanaag", "Bakool", "Mudug" ))
# Map Region to State and create new State column
df2$State <- mapping[as.character(df2$Region)]
# View new State column
df2
df2
library(tidyverse) # metapackage of all tidyverse packages
library(readxl)# Load the necessary package to work with Excel files
# Read Excel file
df <- read_excel("SOMALIA_2021_POPULATION_FIGURES_AND_DISAGGREGATION.xlsx")
# View the data
df
# Read Excel file
df2 <- read_csv("somalia_population_disagregation.csv")
# View the data
df2
# calculate the sum of missing values in the dataframe
sum(is.na(df2))
sum(duplicated(df2))
# Checking data types for df2
str(df2)
colnames(df2) <- c("Region", "District", "Total_population", "IDPs", "Non_displaced",
"IDPs_children", "IDPs_men", "IDPs_women", "IDPs_elderly", "Subtotal_IDPs",
"Non_disp_children", "Non_disp_men", "Non_disp_women", "Non_disp_elderly",
"Subtotal_non_displaced", "Total_children", "Total_men", "Total_women",
"Total_elderly", "Total")
df2
# Create boxplots for each variable
boxplot(df2$Total_population, df2$IDPs, df2$Non_displaced, df2$IDPs_children, df2$IDPs_men, df2$IDPs_women, df2$IDPs_elderly, df2$Subtotal_IDPs, df2$Non_disp_children, df2$Non_disp_men, df2$Non_disp_women, df2$Non_disp_elderly, df2$Subtotal_non_displaced, df2$Total_children, df2$Total_men, df2$Total_women, df2$Total_elderly, df2$Total)
# Identify potential outliers in each variable
outliers <- boxplot(df2$Total_population, df2$IDPs, df2$Non_displaced, df2$IDPs_children, df2$IDPs_men, df2$IDPs_women, df2$IDPs_elderly, df2$Subtotal_IDPs, df2$Non_disp_children, df2$Non_disp_men, df2$Non_disp_women, df2$Non_disp_elderly, df2$Subtotal_non_displaced, df2$Total_children, df2$Total_men, df2$Total_women, df2$Total_elderly, df2$Total, plot=FALSE)$out
# Print out the potential outliers
print(outliers)
unique(df$Region)
mapping <- list(
'Gedo' = 'Jubbaland',
'Banadir' = 'Banaadir',
'Mudug' = 'Galmudug',
'Bay' = 'South West',
'Lower Shabelle' = 'Jubbaland',
'Bari' = 'Puntland',
'Hiraan' = 'Hirshabeelle',
'Nugaal' = 'Puntland',
'Lower Juba' = 'Jubbaland',
'Galgaduud' = 'Galmudug',
'Sanaag' = 'Somaliland',
'Awdal' = 'Somaliland',
'Woqooyi Galbeed' = 'Somaliland',
'Togdheer' = 'Somaliland',
'Bakool' = 'South West',
'Sool' = 'Puntland',
'Middle Shabelle' = 'Hirshabeelle',
'Middle Juba' = 'Hirshabeelle'
)
df2$State <- sapply(df2$Region, function(x) {
ifelse(x %in% names(mapping), mapping[[x]], 'Unknown')
})
df2
df2[, c("State", "Region")]
unique(df2$State)
# Read Excel file
df2 <- read_csv("somalia_population_disagregation.csv")
# View the data
df2
colnames(df2) <- c("Region", "District", "Total_population", "IDPs", "Non_displaced",
"IDPs_children", "IDPs_men", "IDPs_women", "IDPs_elderly", "Subtotal_IDPs",
"Non_disp_children", "Non_disp_men", "Non_disp_women", "Non_disp_elderly",
"Subtotal_non_displaced", "Total_children", "Total_men", "Total_women",
"Total_elderly", "Total")
# Create boxplots for each variable
boxplot(df2$Total_population, df2$IDPs, df2$Non_displaced, df2$IDPs_children, df2$IDPs_men, df2$IDPs_women, df2$IDPs_elderly, df2$Subtotal_IDPs, df2$Non_disp_children, df2$Non_disp_men, df2$Non_disp_women, df2$Non_disp_elderly, df2$Subtotal_non_displaced, df2$Total_children, df2$Total_men, df2$Total_women, df2$Total_elderly, df2$Total)
# Identify potential outliers in each variable
outliers <- boxplot(df2$Total_population, df2$IDPs, df2$Non_displaced, df2$IDPs_children, df2$IDPs_men, df2$IDPs_women, df2$IDPs_elderly, df2$Subtotal_IDPs, df2$Non_disp_children, df2$Non_disp_men, df2$Non_disp_women, df2$Non_disp_elderly, df2$Subtotal_non_displaced, df2$Total_children, df2$Total_men, df2$Total_women, df2$Total_elderly, df2$Total, plot=FALSE)$out
# Print out the potential outliers
print(outliers)
unique(df$Region)
mapping <- list(
'Gedo' = 'Jubbaland',
'Banadir' = 'Banaadir',
'Mudug' = 'Galmudug',
'Bay' = 'South West',
'Lower Shabelle' = 'South West',
'Bari' = 'Puntland',
'Hiraan' = 'Hirshabeelle',
'Nugaal' = 'Puntland',
'Lower Juba' = 'Jubbaland',
'Galgaduud' = 'Galmudug',
'Sanaag' = 'Somaliland',
'Awdal' = 'Somaliland',
'Woqooyi Galbeed' = 'Somaliland',
'Togdheer' = 'Somaliland',
'Bakool' = 'South West',
'Sool' = 'Puntland',
'Middle Shabelle' = 'Hirshabeelle',
'Middle Juba' = 'Jubbaland'
)
df2$State <- sapply(df2$Region, function(x) {
ifelse(x %in% names(mapping), mapping[[x]], 'Unknown')
})
unique(df2$State)
df <- df2[, c("State", "Region", colnames(df)[-c(1,2)])]
df2 <- df2[, c("State", "Region", colnames(df)[-c(1,2)])]
df <- df2[, c("State", "Region", colnames(df2)[-c(1,2)])]
df
# Read Excel file
df2 <- read_csv("somalia_population_disagregation.csv")
# View the data
df2
colnames(df2) <- c("Region", "District", "Total_population", "IDPs", "Non_displaced",
"IDPs_children", "IDPs_men", "IDPs_women", "IDPs_elderly", "Subtotal_IDPs",
"Non_disp_children", "Non_disp_men", "Non_disp_women", "Non_disp_elderly",
"Subtotal_non_displaced", "Total_children", "Total_men", "Total_women",
"Total_elderly", "Total")
df2
mapping <- list(
'Gedo' = 'Jubbaland',
'Banadir' = 'Banaadir',
'Mudug' = 'Galmudug',
'Bay' = 'South West',
'Lower Shabelle' = 'South West',
'Bari' = 'Puntland',
'Hiraan' = 'Hirshabeelle',
'Nugaal' = 'Puntland',
'Lower Juba' = 'Jubbaland',
'Galgaduud' = 'Galmudug',
'Sanaag' = 'Somaliland',
'Awdal' = 'Somaliland',
'Woqooyi Galbeed' = 'Somaliland',
'Togdheer' = 'Somaliland',
'Bakool' = 'South West',
'Sool' = 'Puntland',
'Middle Shabelle' = 'Hirshabeelle',
'Middle Juba' = 'Jubbaland'
)
df2$State <- sapply(df2$Region, function(x) {
ifelse(x %in% names(mapping), mapping[[x]], 'Unknown')
})
df2
df <- df2[, c("State", "Region", colnames(df2)[-c(1,2)])]
df
# Read Excel file
df2 <- read_csv("somalia_population_disagregation.csv")
# View the data
df2
colnames(df2) <- c("Region", "District", "Total_population", "IDPs", "Non_displaced",
"IDPs_children", "IDPs_men", "IDPs_women", "IDPs_elderly", "Subtotal_IDPs",
"Non_disp_children", "Non_disp_men", "Non_disp_women", "Non_disp_elderly",
"Subtotal_non_displaced", "Total_children", "Total_men", "Total_women",
"Total_elderly", "Total")
mapping <- list(
'Gedo' = 'Jubbaland',
'Banadir' = 'Banaadir',
'Mudug' = 'Galmudug',
'Bay' = 'South West',
'Lower Shabelle' = 'South West',
'Bari' = 'Puntland',
'Hiraan' = 'Hirshabeelle',
'Nugaal' = 'Puntland',
'Lower Juba' = 'Jubbaland',
'Galgaduud' = 'Galmudug',
'Sanaag' = 'Somaliland',
'Awdal' = 'Somaliland',
'Woqooyi Galbeed' = 'Somaliland',
'Togdheer' = 'Somaliland',
'Bakool' = 'South West',
'Sool' = 'Puntland',
'Middle Shabelle' = 'Hirshabeelle',
'Middle Juba' = 'Jubbaland'
)
df2$State <- sapply(df2$Region, function(x) {
ifelse(x %in% names(mapping), mapping[[x]], 'Unknown')
})
df2
df <- df2[,c(ncol(df2),1:(ncol(df2)-1))]
df
describe(df)
install.packages(psych)
install.packages(psych)
install.packages(summarytools)
library(psych)
install.packages('psych')
library(psych)
escribe(df)
library(psych)
describe(df)
install.packages('psych')
install.packages('summarytools')
#install.packages('psych')
install.packages('summarytools')
#library(psych)
library(summarytools)
describe(df)
library(psych)
describe(df)
source("E:/Semester 2/3. Data Visualization/course project/course project.Rmd")
source("E:/Semester 2/3. Data Visualization/course project/course project.Rmd")
